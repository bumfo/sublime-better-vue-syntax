%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Better Vue Component
file_extensions:
  - vue
scope: text.html.vue

variables:
  attribute_name: '[a-zA-Z_\-][a-zA-Z0-9_\-]*(?![a-zA-Z0-9_\-])'
  js_identifier: '(?!=[a-zA-Z0-9_$])[a-zA-Z_$][a-zA-Z0-9_$]*(?![a-zA-Z0-9_$])'

  tagnames_block_any: '(?i:address|blockquote|dd|div|section|article|aside|header|footer|nav|menu|dl|dt|frame|frameset|h1|h2|h3|h4|h5|h6|iframe|noframes|object|ol|p|ul|applet|center|dir|pre|hr)'
  tagnames_block_form: '(?i:form|fieldset)'
  tagnames_inline_any: '(?i:abbr|acronym|area|b|base|basefont|bdo|big|br|caption|cite|code|del|dfn|em|font|head|html|i|img|ins|isindex|kbd|li|link|map|meta|noscript|param|q|s|samp|script|small|span|strike|strong|style|sub|sup|title|tt|u|var)'
  tagnames_inline_form: '(?i:button|input|label|legend|optgroup|option|select|textarea)'
  tagnames_inline_a: '(?i:a)'
  tagnames_inline_table: '(?i:col|colgroup|table|tbody|td|tfoot|th|thead|tr)'
  tagnames_custom: '([a-z_][a-z0-9:_]*-[a-z0-9:_-]+)'
  tagnames_component: '([A-Z][a-zA-Z0-9:]*)'
  tagnames_other: '([a-zA-Z0-9:]+)'

contexts:
  
  main:
    - include: tags

  tags:
    - include: script-tags
    - include: style-tags
    - include: custom-tags
    - include: inline-form-tags
    - include: inline-any-tags
    - include: block-form-tags
    - include: block-any-tags
    - include: other-tags
    - include: vue-template-tags
    - include: scope:text.html.basic

  basic:
    - include: custom-tags
    - include: inline-form-tags
    - include: inline-any-tags
    - include: block-form-tags
    - include: block-any-tags
    - include: other-tags
    - include: vue-template-tags

  meta-style-begin:
    - meta_scope: meta.tag.style.begin.html
    - match: ''
      pop: true

  meta-script-begin:
    - meta_scope: meta.tag.script.begin.html
    - match: ''
      pop: true

  meta-custom-begin:
    - meta_scope: meta.tag.custom.begin.html
    - match: ''
      pop: true

  meta-inline-any-begin:
    - meta_scope: meta.tag.inline.any.html
    - match: ''
      pop: true

  meta-inline-form-begin:
    - meta_scope: meta.tag.inline.form.html
    - match: ''
      pop: true

  meta-block-any-begin:
    - meta_scope: meta.tag.block.any.html
    - match: ''
      pop: true

  meta-block-form-begin:
    - meta_scope: meta.tag.block.form.html
    - match: ''
      pop: true

  meta-other-begin:
    - meta_scope: meta.tag.other.begin.html
    - match: ''
      pop: true


  style-tags:
    - match: '(<)((?:style)\b)(?=[^>]+\b(?:lang)="scss"[^>]*>)'
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.style.html
      push: [style-end, style-scss-context, meta-style-begin, tag-stuff]
    - match: '(<)((?:style)\b)'
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.style.html
      push: [style-end, style-css-context, meta-style-begin, tag-stuff]

  script-tags:
    - match: '(<)((?:script)\b)'
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.script.html
      push: [script-end, script-context, meta-script-begin, tag-stuff]

  custom-tags:
    - match: '(<)((?:[a-zA-Z_]+(?:-[a-zA-Z_]+)+)\b)'
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.custom.html
      push: [meta-custom-begin, tag-stuff]

  inline-any-tags:
    - match: '(<)({{tagnames_inline_any}}\b)'
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.inline.any.html
      push: [meta-inline-any-begin, tag-stuff]

  inline-form-tags:
    - match: '(<)({{tagnames_inline_form}}\b)'
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.inline.form.html
      push: [meta-inline-form-begin, tag-stuff]

  block-any-tags:
    - match: '(<)({{tagnames_block_any}}\b)'
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.block.any.html
      push: [meta-block-any-begin, tag-stuff]

  block-form-tags:
    - match: '(<)({{tagnames_block_form}}\b)'
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.block.form.html
      push: [meta-block-form-begin, tag-stuff]

  other-tags:
    - match: '(<)({{tagnames_other}}\b)'
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.other.html
      push: [meta-other-begin, tag-stuff]

  vue-template-tags:
    - scope: support.function.vue
      match: '\{\{'
      push: [vue-mustache-end, mustache-js-expr-context]

  vue-mustache-end:
    - scope: support.function.vue
      match: '\}\}'
      pop: true

  tag-stuff:
    - include: tag-stuff-vue-attributes
    - include: tag-stuff-other-attributes
    - scope: punctuation.definition.tag.end.html
      match: '>'
      pop: true

  tag-stuff-vue-attributes:
    - scope: entity.other.attribute-name.html storage.type
      match: '(@){{attribute_name}}'
      captures:
        1: punctuation.vue.on
      push: [tag-stuff-attribute-punctuation-and-js-expr-value, tag-stuff-modifier]
    - scope: entity.other.attribute-name.html keyword.vue.directives
      match: 'v-(?:for|if|show|model)'
      push: tag-stuff-attribute-punctuation-and-js-expr-value
    - scope: entity.other.attribute-name.html meta.vue.v-bind
      match: '(:){{attribute_name}}'
      captures:
        1: punctuation.vue.expr
      push: [tag-stuff-attribute-punctuation-and-js-expr-value, tag-stuff-modifier]

  tag-stuff-modifier:
    - match: '(\.)([a-zA-Z]+)'
      captures:
        1: punctuation
        2: keyword.other.modifier
    - match: '(?=\S)'
      pop: true

  tag-stuff-attribute-punctuation-and-js-expr-value:
    - scope: punctuation.separator.key-value.html
      match: '='
      set:
        - scope: punctuation.definition.string.begin.html
          match: '"'
          set: [end-double-quote, js-expr-double-quoted-content]
          with_prototype:
            - match: '(?=")'
              pop: true
        - scope: string.unquoted.html
          match: '{{attribute_name}}(?!\s*=)'
          pop: true
        - match: '(?=\S)'
          pop: true
    - match: '(?=\S)'
      pop: true

  js-expr-double-quoted-content:
    - meta_scope: meta.string.quoted.double.html
    - include: js-expr-contents

  end-double-quote:
    - scope: punctuation.definition.string.end.html
      match: '"'
      pop: true

  tag-stuff-other-attributes:
    - scope: entity.other.attribute-name.html
      match: '{{attribute_name}}'
      push: tag-stuff-attribute-punctuation-and-value

  tag-stuff-attribute-punctuation-and-value:
    - scope: punctuation.separator.key-value.html
      match: '='
      set:
        - scope: punctuation.definition.string.begin.html
          match: '"'
          set:
            - meta_scope: string.quoted.double.html
            - scope: punctuation.definition.string.end.html
              match: '"'
              pop: true
        - scope: string.unquoted.html
          match: '{{attribute_name}}(?!\s*=)'
          pop: true
        - match: '(?=\S)'
          pop: true
    - match: '(?=\S)'
      pop: true

  custom-tag-end:
    - scope: meta.tag.custom.end.html
      match: '(</)([^>]*)(>)'
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.custom.html
        3: punctuation.definition.tag.end.html
      pop: true

  style-end:
    - scope: meta.tag.style.end.html
      match: '(</)(style)(>)'
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.style.html
        3: punctuation.definition.tag.end.html
      pop: true

  script-end:
    - scope: meta.tag.script.end.html
      match: '(</)(script)(>)'
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.script.html
        3: punctuation.definition.tag.end.html
      pop: true

  js-expr-contents:
    - meta_content_scope: source.js.embedded.html
    - include: scope:source.js#expressions

  css-contents:
    - meta_content_scope: source.css.embedded.html
    - include: scope:source.css

  scss-contents:
    - meta_content_scope: source.scss.embedded.html
    - include: scope:source.scss

  script-contents:
    - meta_content_scope: source.js.embedded.html
    - include: scope:source.js

  test-js-expr-context:
    - match: ''
      set: js-expr-contents
      with_prototype:
        - match: '(?=</([^>]*)>)'
          pop: true

  mustache-js-expr-context:
    - match: ''
      set: js-expr-contents
      with_prototype:
        - match: '(?=\}\})'
          pop: true

  style-css-context:
    - match: ''
      set: css-contents
      with_prototype:
        - match: '(?=</style>)'
          pop: true

  style-scss-context:
    - match: ''
      set: scss-contents
      with_prototype:
        - match: '(?=</style>)'
          pop: true

  script-context:
    - match: ''
      set: script-contents
      with_prototype:
        - match: '(?=</script>)'
          pop: true

